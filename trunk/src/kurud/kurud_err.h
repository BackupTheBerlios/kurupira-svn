/*
 * Copyright (C) 2006-07 The Kurupira Project
 * 
 * Kurupira is the legal property of its developers, whose names are not listed
 * here. Please refer to the COPYRIGHT file.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @file kurud_err.h
 * 
 * Error codes and interface of error management functions.
 * 
 * @version $Header$
 * @ingroup kurud
 */

#ifndef _KURUD_ERR_H_
	#define _KURUD_ERR_H_

	#include <kurupira/layers.h>

	/* @{ */
	/**
	 * Possible error code generated by kurud.
	 */
	#define REASON_MEMORY				"not enough memory"
	#define REASON_CONFIG_NOT_FOUND		"configuration file %s not found"
	#define REASON_CONFIG_PARSING		"error parsing configuration file"
	#define REASON_CONFIG_SANITY		"configuration file is not sane"
	#define REASON_CONFIGURATION		"error in configuration routine"
	#define REASON_FILE_NOT_FOUND		"file %s not found"
	#define REASON_PARAMETER_NOT_FOUND	"%s parameter not found"
	#define REASON_LOCK_FILE			"another daemon is running"
	#define REASON_UNLOCK_FILE			"can't delete lock file"
	#define REASON_CONDVAR_CREATE		"error creating condition variable"
	#define REASON_CONDVAR_DESTROY		"error destroying condition variable"
	#define REASON_CONDVAR_INVALID		"invalid condition variable"
	#define REASON_MUTEX_CREATE			"error creating mutex"	
	#define REASON_MUTEX_DESTROY		"error destroying mutex"
	#define REASON_MUTEX_INVALID		"invalid mutex"
	#define REASON_LOAD_MODULE			"error loading module %s"
	#define REASON_LOAD_SYMBOL			"can't find symbol %s - %s"
	#define REASON_LOAD_CONSOLE			"can't load console"
	#define REASON_SIGNAL				"error registering signal"
	#define REASON_CONSOLE_INIT			"error in console initialization"
	#define REASON_DAEMON_FORK			"can't fork daemon"
	#define REASON_DAEMON_INIT			"error in daemon initialization"
	#define REASON_DAEMON_RUN			"can't run daemon"
	#define REASON_LINK_INIT			"error in link layer initialization"
	#define REASON_NET_INIT				"error in network layer initialization"
	#define REASON_DLOPEN				"error in dlopen() call: %s"
	#define REASON_DLSYM				"error in dlsym() call: %s"
	#define REASON_DLCLOSE				"error in dlclose() call: %s"
	#define REASON_PTHREADS				"error in pthreads call: %s"
	#define REASON_THREAD_CREATE		"error creating thread: %s"
	#define REASON_THREAD_RUN			"error running thread: %s"
	#define REASON_THREAD_CANCEL		"error canceling thread: %s"
	#define REASON_SOCKET_CREATE		"error creating console socket %s"
	#define REASON_SOCKET_TOO_LONG		"socket file name is too long"
	#define REASON_SOCKET_BIND			"error binding console socket: %s"
	#define REASON_SOCKET_LISTEN		"error listening to console socket: %s"
	#define REASON_SOCKET_ACCEPT		"error accepting console connection: %s"
	#define REASON_SOCKET_CLOSE			"error closing console socket: %s"
	#define REASON_SOCKET_SEND			"error sending: %s"
	#define REASON_SOCKET_RECEIVE		"error receiving: %s"
	#define REASON_UNLINK				"error deleting file: %s"
	#define REASON_COMMAND_PARSING		"error parsig console command"
	#define REASON_COMMAND_EXEC			"error executing command"
	#define REASON_LAYER_INVALID		"invalid layer requested %d"
	/* @} */

	#undef ERROR_CONTEXT
	/**
	 * The context to use if an error occurs.
	 */
	#define ERROR_CONTEXT 		NULL

	#undef ERROR_CODE
	/**
	 * The error code to use if an error occurs.
	 */
	#define ERROR_CODE			KURUD_ERROR

	#if !defined WITH_DEBUG

		#undef ERROR_PRINT
		/**
		 * The printing function to use if an error occurs.
		 */
		#define ERROR_PRINT			kurud_simple_err

		#undef ERROR_PRINT_ALL
		/**
		 * The printing function to use if an error occurs.
		 */
		#define ERROR_PRINT_ALL		kurud_simple_error

	#else

		#undef ERROR_PRINT
		/**
		 * The printing function to use if an error occurs.
		 */
		#define ERROR_PRINT			kurud_complete_err

		#undef ERROR_PRINT_ALL
		/**
		 * The printing function to use if an error occurs.
		 */
		#define ERROR_PRINT_ALL		kurud_complete_error

	#endif /* !WITH_DEBUG */
	
	#undef ERROR_PRINT_FATAL
	/**
	 * The printing function to use if a fatal error occurs.
	 */
	#define ERROR_PRINT_FATAL		kurud_fatal_err

	#undef ERROR_CALLBACK
	/**
	 * The error callback to use if an error occurs.
	 */
	#define ERROR_CALLBACK		goto end;

	/**
	 * Logs the error message with little information.
	 * 
	 * @param[out] CONTEXT  - the module context
	 * @param[in] CODE      - the error returned by the last function called
	 * @param[in] REASON    - the reason that caused the error
	 */
	#define kurud_simple_err(CONTEXT, CODE, REASON)							\
		liblog_error(MODULE_DAEMON, "%s.", REASON)

	/**
	 * Logs the error message with little information.
	 * 
	 * @param[out] CONTEXT  - the module context
	 * @param[in] CODE      - the error returned by the last function called
	 * @param[in] REASON    - the reason that caused the error
	 * @param[in] ...       - the arguments matching REASON as format string 
	 */
	#define kurud_simple_error(CONTEXT, CODE, REASON, ...)					\
		liblog_error(MODULE_DAEMON, "%s.", REASON, ##__VA_ARGS__)

	/**
	 * Logs the error message with detailed information.
	 * 
	 * @param[out] CONTEXT  - the module context
	 * @param[in] CODE      - the error returned by the last function called
	 * @param[in] REASON    - the reason that caused the error
	 */
	#define kurud_complete_err(CONTEXT, CODE, REASON)						\
		liblog_error(MODULE_DAEMON, "error in %s() at %s,%d: %s.", __func__, __FILE__, __LINE__, REASON)\

	/**
	 * Logs the error message with detailed information.
	 * 
	 * @param[out] CONTEXT  - the module context
	 * @param[in] CODE      - the error returned by the last function called
	 * @param[in] REASON    - the reason that caused the error
	 * @param[in] ...       - the arguments matching REASON as format string
	 */
	#define kurud_complete_error(CONTEXT, CODE, REASON, ...)				\
		liblog_error(MODULE_DAEMON, "error in %s() at %s,%d:", __func__, __FILE__, __LINE__);\
		liblog_error(MODULE_DAEMON, "\t"REASON".", ##__VA_ARGS__)

	/**
	 * Logs the fatal error message with little information.
	 * 
	 * @param[out] CONTEXT  - the module context
	 * @param[in] CODE      - the error returned by the last function called
	 * @param[in] REASON    - the reason that caused the error
	 */
	#define kurud_fatal_err(CONTEXT, CODE, REASON)							\
		liblog_fatal(MODULE_DAEMON, "%s.", REASON)

#endif /* !_LIBLESS_ERR_H_ */
