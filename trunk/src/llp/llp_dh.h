/*
 * Copyright (C) 2004 by
 * - Diego "iamscared" Aranha <iamscared[at]users.sourceforge.net> &
 * - Edans "snade" Flavius <snade[at]users.sourceforge.net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
 
/**
 * @file llp_dh.h Headers of routines for the Diffie & Hellman key agreement.
 * @ingroup llp
 */

#ifndef _LLP_DH_H_
#define _LLP_DH_H_

/**
 * Computes the part of the Diffie & Hellman key agreement that is sent to the 
 * connecting peer. The parameter y_out must be LLP_Y_LENGTH bytes long and x 
 * will be initialized to contain a random exponent.
 * 
 * @param x - random exponent used in computation.
 * @param y - address of a already allocated mpint that will store the result.
 * @return LLP_OK if no errors occurred, LLP_OK otherwise.
 */
int llp_compute_dh_params(mpint x, mpint y);

/**
 * Computes the shared secret generated by the Diffie & Hellman key agreement.
 * The parameter z must be LLP_Z_LENGTH bytes long and x is expected to store 
 * an exponent randomly generated.
 * 
 * @param z - address of a already allocated mpint that will store the result.
 * @param y - result of modular exponentiation computed by remote peer.
 * @param x - random exponent used in computation.
 * @return LLP_OK if no errors occurred, LLP_OK otherwise.
 */
int llp_compute_dh_secret(mpint z, mpint y, mpint x);

#endif /* !_LLP_DH_H_ */
